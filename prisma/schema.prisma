generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Follows {
  id         String @id
  followerId String
  followeeId String
  User       User   @relation(fields: [followerId], references: [id], onDelete: Cascade)
}

model Itineraries {
  id                    String                  @id
  author                String
  cover                 String?
  createdAt             DateTime                @default(now())
  days                  Int
  interests             String[]
  made                  Boolean
  rate                  Int
  spent                 String
  title                 String
  tripDate              String
  model                 String
  User                  User                    @relation(fields: [author], references: [id])
  ItinerariesOnRoadmaps ItinerariesOnRoadmaps[]
  ItinerariesRate       ItinerariesRate?
  ItinerariesSimple     ItinerariesSimple?
  ItineraryComment      ItineraryComment[]
}

model ItinerariesOnRoadmaps {
  id            String      @id
  itinerariesId String
  roadmapsId    String
  Itineraries   Itineraries @relation(fields: [itinerariesId], references: [id])
  Roadmaps      Roadmaps    @relation(fields: [roadmapsId], references: [id])
}

model ItinerariesRate {
  id            String      @id
  media         Int
  quantity      Int
  itinerariesId String      @unique
  Itineraries   Itineraries @relation(fields: [itinerariesId], references: [id])
}

model ItinerariesSimple {
  id                      String                    @id
  summary                 String?
  itinerariesId           String                    @unique
  Itineraries             Itineraries               @relation(fields: [itinerariesId], references: [id])
  ItinerariesSimpleCities ItinerariesSimpleCities[]
}

model ItinerariesSimpleCities {
  id                                    String                                  @id
  description                           String
  images                                String[]
  name                                  String
  rate                                  Int
  itinerariesSimpleId                   String
  ItinerariesSimple                     ItinerariesSimple                       @relation(fields: [itinerariesSimpleId], references: [id])
  ItinerariesSimpleCitiesAccommodations ItinerariesSimpleCitiesAccommodations[]
  ItinerariesSimpleCitiesCoordinates    ItinerariesSimpleCitiesCoordinates[]
}

model ItinerariesSimpleCitiesAccommodations {
  id                        String                  @id
  name                      String
  rate                      Int
  itinerariesSimpleCitiesId String
  ItinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
}

model ItinerariesSimpleCitiesCoordinates {
  id                        String                  @id
  latitude                  Json
  longitude                 Json
  itinerariesSimpleCitiesId String
  ItinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
}

model ItineraryComment {
  id          String      @id
  content     String
  itineraryId String
  author      String
  User        User        @relation(fields: [author], references: [id])
  Itineraries Itineraries @relation(fields: [itineraryId], references: [id])
}

model RoadmapComment {
  id        String   @id
  content   String
  roadmapId String
  author    String
  User      User     @relation(fields: [author], references: [id])
  Roadmaps  Roadmaps @relation(fields: [roadmapId], references: [id])
}

model Roadmaps {
  id                    String                  @id
  ItinerariesOnRoadmaps ItinerariesOnRoadmaps[]
  RoadmapComment        RoadmapComment[]
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  firstname        String?
  lastname         String?
  gender           String?
  about            String?
  birthdate        String?
  confirmPolicy    Boolean            @default(false)
  country          String?
  ranking          String?
  interests        String[]
  username         String?            @unique
  password         String?
  favorites        Json?
  role             ROLE               @default(user)
  Account          Account[]
  Follows          Follows[]
  Itineraries      Itineraries[]
  ItineraryComment ItineraryComment[]
  RoadmapComment   RoadmapComment[]
  Session          Session[]
  UsersPictures    UsersPictures?
  UsersSocial      UsersSocial?
  city_card        city_card[]
  refresh_token    refresh_token?
}

model UsersPictures {
  id            String @id
  cover         String
  profile       String
  userProfileId String @unique
  User          User   @relation(fields: [userProfileId], references: [id])
}

model UsersSocial {
  id            String @id
  facebook      String
  instagram     String
  userProfileId String @unique
  User          User   @relation(fields: [userProfileId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model affiliate_script {
  id           String    @id
  script       String
  city_card_id String
  city_card    city_card @relation(fields: [city_card_id], references: [id])
}

model city_card {
  id               String             @id
  image            String
  name             String
  description      String
  author           String
  User             User               @relation(fields: [author], references: [id])
  affiliate_script affiliate_script[]
}

model refresh_token {
  id        String @id
  expiresIn Int
  userId    String @unique
  User      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ROLE {
  admin
  manager
  user
}
