generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Follows {
  id         String @id
  followerId String
  followeeId String
  User       User   @relation(fields: [followerId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  firstname           String?
  lastname            String?
  gender              String?
  about               String?
  birthdate           String?
  confirmPolicy       Boolean               @default(false)
  country             String?
  ranking             String?
  interests           String[]
  username            String?               @unique
  password            String?
  favorites           Json?
  role                ROLE                  @default(user)
  Account             Account[]
  CityCard            CityCard[]
  Destination         Destination[]
  DestinationComments DestinationComments[]
  Follows             Follows[]
  Roadmap             Roadmap[]
  Session             Session[]
  UsersPictures       UsersPictures?
  UsersSocial         UsersSocial?
  refresh_token       refresh_token?
}

model UsersPictures {
  id            String @id
  cover         String
  profile       String
  userProfileId String @unique
  User          User   @relation(fields: [userProfileId], references: [id])
}

model UsersSocial {
  id        String @id
  facebook  String
  instagram String
  userId    String @unique
  User      User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model refresh_token {
  id        String @id
  expiresIn Int
  userId    String @unique
  User      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AffiliateScript {
  id           String   @id
  script       String
  city_card_id String
  CityCard     CityCard @relation(fields: [city_card_id], references: [id])
}

model CityCard {
  id              String            @id
  image           String
  name            String
  description     String
  author          String
  User            User              @relation(fields: [author], references: [id])
  AffiliateScript AffiliateScript[]
}

model Destination {
  id                  String                @id
  name                String
  countryCode         String
  stateCode           String
  latitude            String
  longitude           String
  roadmapId           String
  images              String[]
  cityRate            Int                   @default(5)
  destinationReview   String?
  hotel               String?
  hotelRate           Int                   @default(5)
  author              String                @default("389b0b6b-012b-4e73-b815-1d40781ff892")
  User                User                  @relation(fields: [author], references: [id])
  Roadmap             Roadmap               @relation(fields: [roadmapId], references: [id])
  DestinationComments DestinationComments[]
}

model DestinationComments {
  id            String      @id
  author        String
  content       String
  destinationId String
  rating        Int
  User          User        @relation(fields: [author], references: [id])
  Destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model Roadmap {
  id              String            @id
  author          String
  cover           String?
  made            Boolean
  title           String
  tripDate        String
  daysOnTrip      Int
  interests       String[]
  perPersonCost   String
  roadmapReview   String
  createdAt       DateTime          @default(now())
  rate            Int
  User            User              @relation(fields: [author], references: [id])
  Destination     Destination[]
  RoadmapComments RoadmapComments[]
}

model RoadmapComments {
  id        String  @id
  author    String
  content   String
  roadmapId String
  rating    Int
  Roadmap   Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
}

enum ROLE {
  admin
  manager
  user
}
