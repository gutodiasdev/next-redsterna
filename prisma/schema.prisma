generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model ItinerariesRate {
  id       String @id @default(uuid())
  media    Int
  quantity Int

  itinerariesId String      @unique
  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
}

model ItinerariesSimple {
  id      String                    @id @default(uuid())
  cities  ItinerariesSimpleCities[]
  summary String?

  itinerariesId String      @unique
  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
}

model ItinerariesSimpleCitiesCoordinates {
  id        String @id @default(uuid())
  latitude  Json
  longitude Json

  itinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
  itinerariesSimpleCitiesId String
}

model ItinerariesSimpleCitiesAccommodations {
  id   String @id @default(uuid())
  name String
  rate Int

  itinerariesSimpleCitiesId String
  itinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
}

model ItinerariesSimpleCities {
  id          String   @id @default(uuid())
  description String
  images      String[]
  name        String
  rate        Int

  itinerariesSimpleId String
  intinerariesSimple  ItinerariesSimple @relation(fields: [itinerariesSimpleId], references: [id])

  accommodations ItinerariesSimpleCitiesAccommodations[]
  coordinates    ItinerariesSimpleCitiesCoordinates[]
}

model UsersPictures {
  id      String @id @default(uuid())
  cover   String
  profile String

  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
}

model UsersSocial {
  id        String @id @default(uuid())
  facebook  String
  instagram String

  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String      @unique
}

model Itineraries {
  id        String              @id @default(uuid())
  v         Int                 @map("__v")
  author    String
  cover     String?
  createdAt DateTime            @db.Date
  days      Int
  interests String[]
  made      Boolean
  rate      ItinerariesRate?
  simple    ItinerariesSimple[]
  spent     String
  title     String
  tripDate  String
  model     String

  roadmaps ItinerariesOnRoadmaps[]

  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
}

model Roadmaps {
  id       String           @id @default(uuid())
  comments RoadmapComment[]

  itineraries ItinerariesOnRoadmaps[]
}

model ItinerariesOnRoadmaps {
  id String @id @default(uuid())

  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
  itinerariesId String
  roadmaps      Roadmaps    @relation(fields: [roadmapsId], references: [id])
  roadmapsId    String
}

model RoadmapComment {
  id      String @id @default(uuid())
  content String

  roadmap   Roadmaps @relation(fields: [roadmapId], references: [id])
  roadmapId String

  createdBy     UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follows {
  id         String @id @default(uuid())
  followerId String
  followeeId String

  follower UserProfile @relation(fields: [followerId], references: [id])
}

model UserProfile {
  id               String           @id @default(uuid())
  firstname        String?
  lastname         String?
  gender           String?
  pictures         UsersPictures?
  social           UsersSocial?
  about            String?
  birthdate        String?
  confirmPolicy    Boolean          @default(false)
  country          String?
  ranking          String?
  follows          Follows[]
  interests        String[]
  itineraries      Itineraries[]
  uniqueIdentifier String?          @unique
  RoadmapComment   RoadmapComment[]
  password         String?
  favorites        Json?
}

// MONGODB PROVIDER //

// model ItinerariesRate {
//   media    Int
//   quantity Int
// }

// model ItinerariesSimple {
//   cities  ItinerariesSimpleCities[]
//   summary String?
// }

// model ItinerariesSimpleCities {
//   id             String                                 
//   accommodations ItinerariesSimpleCitiesAccommodations[]
//   coordinates    ItinerariesSimpleCitiesCoordinates
//   description    String
//   images         String[]
//   name           String
//   rate           Int
// }

// model ItinerariesSimpleCitiesAccommodations {
//   id   String
//   name String
//   rate Int
// }

// model ItinerariesSimpleCitiesCoordinates {
//   latitude  Json
//   longitude Json
// }

// model UsersPictures {
//   cover   String
//   profile String
// }

// model UsersSocial {
//   facebook  String
//   instagram String
// }

// model Itineraries {
//   id        String            @id @default(uuid())
//   v         Int               @map("__v")
//   author    String            
//   cover     String?
//   createdAt DateTime          @db.Date
//   days      Int
//   interests String[]
//   made      Boolean
//   rate      ItinerariesRate?
//   simple    ItinerariesSimple
//   spent     String
//   title     String
//   tripDate  String
//   model      String

//   roadmaps    Roadmaps[] @relation(fields: [roadMapsIds], references: [id])
//   roadMapsIds String[]   

//   userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
//   userProfileId String      
// }

// model Roadmaps {
//   id       String           @id @default(uuid())
//   comments RoadmapComment[]

//   itineraries    Itineraries[] @relation(fields: [itinerariesIds], references: [id])
//   itinerariesIds String[]      
// }

// model RoadmapComment {
//   id        String   @id @default(uuid())
//   roadmap   Roadmaps @relation(fields: [roadmapId], references: [id])
//   roadmapId String   
//   createdBy User     @relation(fields: [userId], references: [id])
//   userId    String   
// }

// model resetToken {
//   id        String    @id @default(uuid())
//   v         Int       @map("__v")
//   expiresAt DateTime  @db.Date
//   token     String
//   usedAt    DateTime? @db.Date
// }

// model Account {
//   id                String  @id @default(uuid())
//   userId            String  
//   model              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(uuid())
//   sessionToken String   @unique
//   userId       String   
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id               String           @id @default(uuid())
//   name             String?
//   email            String?          @unique
//   uniqueIdentifier String?          @unique
//   password         String?
//   emailVerified    DateTime?
//   image            String?
//   accounts         Account[]
//   sessions         Session[]
//   userProfile      UserProfile?
//   createdAt        DateTime?        @default(now()) @db.Date
//   updatedAt        DateTime?        @updatedAt
//   RoadmapComment   RoadmapComment[]
// }

// model UserProfile {
//   id            String         @id @default(uuid())
//   firstname     String?
//   lastname      String?
//   gender        String?
//   pictures      UsersPictures?
//   social        UsersSocial?
//   about         String?
//   birthdate     String?
//   confirmPolicy Boolean        @default(false)
//   country       String?
//   ranking       String?
//   follows       Follows[]
//   interests     String[]
//   itineraries   Itineraries[]
//   favorites     Json?

//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Follows {
//   id         String @id @default(uuid())
//   followerId String 
//   followeeId String 

//   follower UserProfile @relation(fields: [followerId], references: [id])
// }

// model VerificationToken {
//   id         String   @id @default(uuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
