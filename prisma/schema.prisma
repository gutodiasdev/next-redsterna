generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ItineraryComment {
  id      String @id @default(uuid())
  content String

  itineraryId String
  itinarary   Itineraries @relation(fields: [itineraryId], references: [id])

  author String
  user   User   @relation(fields: [author], references: [id])
}

model ItinerariesRate {
  id       String @id @default(uuid())
  media    Int
  quantity Int

  itinerariesId String      @unique
  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
}

model ItinerariesSimple {
  id      String                    @id @default(uuid())
  cities  ItinerariesSimpleCities[]
  summary String?

  itinerariesId String      @unique
  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
}

model ItinerariesSimpleCitiesCoordinates {
  id        String @id @default(uuid())
  latitude  Json
  longitude Json

  itinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
  itinerariesSimpleCitiesId String
}

model ItinerariesSimpleCitiesAccommodations {
  id   String @id @default(uuid())
  name String
  rate Int

  itinerariesSimpleCitiesId String
  itinerariesSimpleCities   ItinerariesSimpleCities @relation(fields: [itinerariesSimpleCitiesId], references: [id])
}

model ItinerariesSimpleCities {
  id          String   @id @default(uuid())
  description String
  images      String[]
  name        String
  rate        Int

  itinerariesSimpleId String
  intinerariesSimple  ItinerariesSimple @relation(fields: [itinerariesSimpleId], references: [id])

  accommodations ItinerariesSimpleCitiesAccommodations[]
  coordinates    ItinerariesSimpleCitiesCoordinates[]
}

model UsersPictures {
  id      String @id @default(uuid())
  cover   String
  profile String

  userProfileId String @unique
  userProfile   User   @relation(fields: [userProfileId], references: [id])
}

model UsersSocial {
  id        String @id @default(uuid())
  facebook  String
  instagram String

  userProfile   User   @relation(fields: [userProfileId], references: [id])
  userProfileId String @unique
}

model Itineraries {
  id        String              @id @default(uuid())
  // v         Int                 @map("__v")
  author    String
  cover     String?
  createdAt DateTime            @default(now())
  days      Int
  interests String[]
  made      Boolean
  rate      Int
  simple    ItinerariesSimple[]
  spent     String
  title     String
  tripDate  String
  model     String

  roadmaps ItinerariesOnRoadmaps[]
  comments ItineraryComment[]

  user User @relation(fields: [author], references: [id])

  ItinerariesRate ItinerariesRate?
}

model Roadmaps {
  id       String           @id @default(uuid())
  comments RoadmapComment[]

  itineraries ItinerariesOnRoadmaps[]
}

model ItinerariesOnRoadmaps {
  id String @id @default(uuid())

  intineraries  Itineraries @relation(fields: [itinerariesId], references: [id])
  itinerariesId String
  roadmaps      Roadmaps    @relation(fields: [roadmapsId], references: [id])
  roadmapsId    String
}

model RoadmapComment {
  id      String @id @default(uuid())
  content String

  roadmap   Roadmaps @relation(fields: [roadmapId], references: [id])
  roadmapId String

  author String
  user   User   @relation(fields: [author], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String             @id @default(uuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  firstname           String?
  lastname            String?
  gender              String?
  pictures            UsersPictures?
  social              UsersSocial?
  about               String?
  birthdate           String?
  confirmPolicy       Boolean            @default(false)
  country             String?
  ranking             String?
  follows             Follows[]
  interests           String[]
  itineraries         Itineraries[]
  username            String?            @unique
  roadmapsComments    RoadmapComment[]
  itinerariesComments ItineraryComment[]
  password            String?
  favorites           Json?
  refreshToken        RefreshToken?

  accounts Account[]
  sessions Session[]

  role ROLE @default(user)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique

  @@map("refresh_token")
}

model Follows {
  id         String @id @default(uuid())
  followerId String
  followeeId String

  follower User @relation(fields: [followerId], references: [id], onDelete: Cascade)
}

enum ROLE {
  admin
  manager
  user
}
